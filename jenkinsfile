/*pipeline{
    
    agent any 
    
    stages {
        
        stage('Git Checkout'){
            
            steps{
                
                script{
                  git branch: 'main', url: 'https://github.com/adammheni/pipeline.git'

        }
                    }          
                     }
                             stage('Static code analysis'){
            
            steps{
                
                script{
                    
                    withSonarQubeEnv(credentialsId: 'sonar-key-2') {
                        
                        sh 'mvn clean package sonar:sonar'
                    }
                   }
                    
                }
            }
                    stage('Quality Gate Status'){
                
                steps{
                    
                    script{ withSonarQubeEnv(credentialsId: 'sonar-key-2') {
                        
              waitForQualityGate abortPipeline: false, credentialsId: 'sonar-key-2'
                    }
                    }
                }
            }
                     }
                     }
*/
pipeline {
    agent any
    
    tools {
        maven 'maven'
    } 
    stages {
        stage('Build Maven') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/main']],
                    extensions: [],
                    userRemoteConfigs: [[url: 'https://github.com/adammheni/pipeline']]
                )
                sh 'mvn clean install'
            }
        }/*
        stage('Build image') {
            steps {
                script {
                    dockerImage = docker.build dockerImageName
                }
            }
        }
    }
} */
/*pipeline {



  environment {
    dockerimagename = "adammheni/test"
    dockerImage = ""
  }

    agent any 
    
    tools{
        maven 'maven'
    } 
    stages{
        stage('Build Maven'){
            steps{
               checkout scmGit(branches: [[name: '/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/adammheni/pipeline']])
                sh 'mvn clean install'
            }
        }
         stage('Build image') {
           agent {     docker {
            label 'dockeragent'
           
          
            template {
                name 'dockeragent'
         
            }}}
      steps{
        script {
          dockerImage = docker.build dockerimagename
        }
      
    }
         }*/
 /*   stage('Pushing Image') {
agent {docker{
     cloud 'docker0'
                label 'dockeragent'
            }
      steps{
        script {
           
}

          }
          }
          }}*/
       stage('Build docker image'){
            steps{
                script{
                    sh 'docker build -t adammheni/devops .'
                }
            }
        }
         
        stage('Push image to Hub'){
            steps{
                script{
                   /*withDockerRegistry(credentialsId: 'dockerhub', url: 'https://hub.docker.com/repository/docker.com') {
  dockerImage.push("latest")
                }*/
                withCredentials([string(credentialsId: 'dockk', variable: 'dockk12')]) {
                       sh 'docker login -u adammheni -p ${dockk12}'
}               
    sh 'docker push adammheni/devops'
 /*               withDockerRegistry(credentialsId: 'dock') {
   dockerImage.push("latest")
*/}
            }
        }
    /*        stage('Deploy to Kubernetes') {
      steps {
        script {
          kubernetesDeploy(
            kubeconfigId: 'kubeconfig-credentials-id',
            namespace: "",
            yaml: "",
           
          )
        }
      }
    }/*
        stage('Deploy to k8s'){
            steps{
                script{
                    kubernetesDeploy (configs: 'deploymentservice.yaml',kubeconfigId: 'k8sconfigpwd')
                }
            }*/
     
  
    stage('Deploy') {
         agent {
    kubernetes {

      yaml '''
apiVersion: apps/v1
kind: Deployment # Kubernetes resource kind we are creating
metadata:
  name: spring-boot-k8s-deployment
spec:
  selector:
    matchLabels:
      app: spring-boot-k8s
  replicas: 1 # Number of replicas that will be created for this deployment
  template:
    metadata:
      labels:
        app: spring-boot-k8s
    spec:
      containers:
        - name: spring-boot-k8s
          image: adammheni/devops:latest # Image that will be used to containers in the cluster
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000 # The port that the container is running on in the cluster


---

apiVersion: v1 # Kubernetes API version
kind: Service # Kubernetes resource kind we are creating
metadata: # Metadata of the resource kind we are creating
  name: springboot-k8ssvc
spec:
  selector:
    app: spring-boot-k8s
  ports:
    - protocol: "TCP"
      port: 8000 # The port that the service is running on in the cluster
      targetPort: 8000 # The port exposed by the service
  type: NodePort # type of the service.
      '''
      // Additional configuration options for the Kubernetes plugin can be specified here.
    }
  }
      steps {
        sh kubectl apply -f deploy.yaml
 // Additional steps to deploy the image can be specified here.
      }
    }
  
        }
    }
