/*pipeline{
    
    agent any 
    
    stages {
        
        stage('Git Checkout'){
            
            steps{
                
                script{
                  git branch: 'main', url: 'https://github.com/adammheni/pipeline.git'

        }
                    }          
                     }
                             stage('Static code analysis'){
            
            steps{
                
                script{
                    
                    withSonarQubeEnv(credentialsId: 'sonar-key-2') {
                        
                        sh 'mvn clean package sonar:sonar'
                    }
                   }
                    
                }
            }
                    stage('Quality Gate Status'){
                
                steps{
                    
                    script{ withSonarQubeEnv(credentialsId: 'sonar-key-2') {
                        
              waitForQualityGate abortPipeline: false, credentialsId: 'sonar-key-2'
                    }
                    }
                }
            }
                     }
                     }
*/

pipeline {

    agent any 
    
    tools{
        maven 'maven'
    } 
    stages{
        stage('Build Maven'){
            steps{
               checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/adammheni/pipeline']])
                sh 'mvn clean install'
            }
        }
       stage('Build docker image'){
            steps{
                script{
                    sh 'docker build -t adammheni/devops .'
                }
            }
        }
        /* 
        stage('Push image to Hub'){
            steps{
                script{
                   withCredentials([string(credentialsId: 'dockerhub-pwd', variable: 'dockerhubpwd')]) {
                   sh 'docker login -u javatechie -p ${dockerhubpwd}'

}
                   sh 'docker push javatechie/devops-integration'
                }
            }
        }
        stage('Deploy to k8s'){
            steps{
                script{
                    kubernetesDeploy (configs: 'deploymentservice.yaml',kubeconfigId: 'k8sconfigpwd')
                }
            }*/
        }
    }
