/*pipeline{
    
    agent any 
    
    stages {
        
        stage('Git Checkout'){
            
            steps{
                
                script{
                  git branch: 'main', url: 'https://github.com/adammheni/pipeline.git'

        }
                    }          
                     }
                             stage('Static code analysis'){
            
            steps{
                
                script{
                    
                    withSonarQubeEnv(credentialsId: 'sonar-key-2') {
                        
                        sh 'mvn clean package sonar:sonar'
                    }
                   }
                    
                }
            }
                    stage('Quality Gate Status'){
                
                steps{
                    
                    script{ withSonarQubeEnv(credentialsId: 'sonar-key-2') {
                        
              waitForQualityGate abortPipeline: false, credentialsId: 'sonar-key-2'
                    }
                    }
                }
            }
                     }
                     }
*/
pipeline {
    agent any
    
    tools {
        maven 'maven'
    } 
     stages {
    //     stage('Build Maven') {
    //         steps {
    //             checkout scmGit(
    //                 branches: [[name: '*/main']],
    //                 extensions: [],
    //                 userRemoteConfigs: [[url: 'https://github.com/adammheni/pipeline']]
    //             )
    //             sh 'mvn clean install'
    //         }
    //     }
        /*
        stage('Build image') {
            steps {
                script {
                    dockerImage = docker.build dockerImageName
                }
            }
        }
    }
} */
/*pipeline {



  environment {
    dockerimagename = "adammheni/test"
    dockerImage = ""
  }

    agent any 
    
    tools{
        maven 'maven'
    } 
    stages{
        stage('Build Maven'){
            steps{
               checkout scmGit(branches: [[name: '/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/adammheni/pipeline']])
                sh 'mvn clean install'
            }
        }
         stage('Build image') {
           agent {     docker {
            label 'dockeragent'
           
          
            template {
                name 'dockeragent'
         
            }}}
      steps{
        script {
          dockerImage = docker.build dockerimagename
        }
      
    }
         }*/
 /*   stage('Pushing Image') {
agent {docker{
     cloud 'docker0'
                label 'dockeragent'
            }
      steps{
        script {
           
}

    //       }
    //       }
    //       }}*/
    //    stage('Build docker image'){
    //         steps{
    //             script{
    //                 sh 'docker build -t adammheni/devops .'
    //             }
    //         }
    //     }
         
//         stage('Push image to Hub'){
//             steps{
//                 script{
//                    /*withDockerRegistry(credentialsId: 'dockerhub', url: 'https://hub.docker.com/repository/docker.com') {
//   dockerImage.push("latest")
//                 }*/
//                 withCredentials([string(credentialsId: 'dockk', variable: 'dockk12')]) {
//                        sh 'docker login -u adammheni -p ${dockk12}'
// }               
//     sh 'docker push adammheni/devops'
//  /*               withDockerRegistry(credentialsId: 'dock') {
//    dockerImage.push("latest")
// */}
//             }
//         }
    /*        stage('Deploy to Kubernetes') {
      steps {
        script {
          kubernetesDeploy(
            kubeconfigId: 'kubeconfig-credentials-id',
            namespace: "",
            yaml: "deploy.yaml",
           
          )
        }
      }
    }*/
        stage('Deploy to k8s'){
                agent kubernetes{}
            steps{
                script{
                   // kubernetesDeploy (configs: '',kubeconfigId: '052ed1db-b9b1-4d22-bd22-5bf40af879c7')
                
               /*  withKubeConfig([credentialsId: '052ed1db-b9b1-4d22-bd22-5bf40af879c7', serverUrl: 'https://my-kubernetes-cluster']) {
          sh 'kubectl apply -f deploy.yaml'
        }
            }*/
     withKubeConfig(credentialsId: 'juk', namespace: 'jenkins', restrictKubeConfigAccess: false, serverUrl: '172.16.98.128:6443'){
             sh 'kubectl apply -f deploy.yaml'

}
  }
    /*stage('Deploy') {

      steps {
        sh 'kubectl apply -f deploy.yaml'
 // Additional steps to deploy the image can be specified here.
      }
    }
  */
        }
    }
}
}